labs(x = expression("Values of"~theta), y = expression("Log Likelihood Function"~l(theta))) +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle(expression("Log Likelihood Function vs."~theta))
l <- function(a,b){
y<- 0
for (i in 1:length(b)) {
y <- y-n*log(2*pi,base=exp(1)) +log(1 - cos(b[i] - a),base=exp(1))
}
return y
l <- function(a,b){
y<- 0
for (i in 1:length(b)) {
y <- y-n*log(2*pi,base=exp(1)) +log(1 - cos(b[i] - a),base=exp(1))
}
return{y}
l <- function(a,b){
y<- 0
for (i in 1:length(b)) {
y <- y-n*log(2*pi,base=exp(1)) +log(1 - cos(b[i] - a),base=exp(1))
}
y
}
?ggplot
ggplot(data.frame(x = c(-pi, pi)), aes(x = x))
ggplot(data.frame(x = c(-pi, pi)), aes(x = x)) +
stat_function(fun = function(x) log_sum(x, sample)) +
library("ggplot2")
ggplot(data.frame(x = c(-pi, pi)), aes(x = x)) +
stat_function(fun = function(x) log_sum(x, sample)) +
labs(x = expression("Values of"~theta), y = expression("Log Likelihood Function"~l(theta))) +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle(expression("Log Likelihood Function vs."~theta))
library("ggplot2")
ggplot(data.frame(x = c(-pi, pi)), aes(x = x)) +
stat_function(fun = function(x) log_sum(x, sample)) +
labs(x = expression("Values of"~theta), y = expression("Log Likelihood Function"~l(theta))) +
theme(plot.title = element_text(hjust = 0.5)) +
library("ggplot2")
ggplot(data.frame(x = c(-pi, pi)), aes(x = x)) +
stat_function(fun = function(x) log_sum(x, sample)) +
labs(x = expression("Values of"~theta), y = expression("Log Likelihood Function"~l(theta))) +
theme(plot.title = element_text(hjust = 0.5)) +
ggplot(data.frame(x = c(-pi, pi)), aes(x = x)) +
stat_function(fun = function(x) log_sum(x, sample)) +
ggplot(data.frame(x = c(-pi, pi)), aes(x = x)) +
stat_function(fun = function(x) log_sum(x, sample)) +
labs(x = expression("Values of"~theta), y = expression("Log Likelihood Function"~l(theta))) +
theme(plot.title = element_text(hjust = 0.5)) +
##define the loglikelihood function
loglik.my0 <- function(theta, sample) {
n <- length(sample)
if (sum(sample >=0 & sample <= 2*pi) < n) {
print("sample is out of range")
} else if(theta < -pi | theta > pi) {
print("theta is out of range")
} else {
l <- sum(log(1-cos(sample-theta))) - n * log(2*pi)
return(l)
}
}
loglik.my <- function(theta, sample) {
l <- sapply(theta, FUN = loglik.my0, sample = sample)
l
}
s <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46, 3.53, 2.28, 1.96,
2.53, 3.88, 2.22, 3.47, 4.82, 2.46, 2.99, 2.54, 0.52)
curve(loglik.my(x, sample = s), -pi, pi)
loglik.my0 <- function(theta, sample) {
n <- length(sample)
if (sum(sample >=0 & sample <= 2*pi) < n) {
print("sample is out of range")
} else if(theta < -pi | theta > pi) {
print("theta is out of range")
} else {
l <- sum(log(1-cos(sample-theta))) - n * log(2*pi)
return(l)
}
}
loglik.my <- function(theta, sample) {
l <- sapply(theta, FUN = loglik.my0, sample = sample)
l
}
s <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46, 3.53, 2.28, 1.96,
2.53, 3.88, 2.22, 3.47, 4.82, 2.46, 2.99, 2.54, 0.52)
curve(loglik.my(x, sample = s), -pi, pi)
x <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46, 3.53, 2.28, 1.96,
2.53, 3.88, 2.22, 3.47, 4.82, 2.46, 2.99, 2.54, 0.52)
l <- function(a,b){
y<- 0
for (i in 1:length(b)) {
y <- y-n*log(2*pi,base=exp(1)) +log(1 - cos(b[i] - a),base=exp(1))
}
y
}
curve(l(a,b=x),-pi,pi)
x <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46, 3.53, 2.28, 1.96,
2.53, 3.88, 2.22, 3.47, 4.82, 2.46, 2.99, 2.54, 0.52)
l <- function(a,b){
y<- 0
for (i in 1:length(b)) {
y <- y-n*log(2*pi,base=exp(1)) +log(1 - cos(b[i] - a),base=exp(1))
}
y
}
curve(l(y,b=x),-pi,pi)
X <- rcauchy(10, location = 5, scale =1 )
n <- 10
l <- function(x, theta, n){
- n*log(pi, base = exp(1)) - sum(log(1 + (theta - x)^2, base = exp(1)))
}
theta <- seq(0, 10, 0.1)
L <- numeric(0)
for (i in 1: length(theta)){
L[i] <- l(X,theta[i],10)
}
sp=spline(theta,L,n=1000)
plot(sp,col="red",type="l",xlim=c(0,10),ylim=c(-55,-25),lwd=2,xlab="theta",ylab="l(theta)",sub="loglikehood function against theta",col.main="green",font.main=2)
set.seed(20180909)
X <- rcauchy(10, location = 5, scale =1 )
n <- 10
l <- function(x, theta, n){
- n*log(pi, base = exp(1)) - sum(log(1 + (theta - x)^2, base = exp(1)))
}
theta <- seq(0, 10, 0.1)
L <- numeric(0)
for (i in 1: length(theta)){
L[i] <- l(X,theta[i],10)
}
sp=spline(theta,L,n=1000)
plot(sp,col="red",type="l",xlim=c(0,10),ylim=c(-55,-25),lwd=2,xlab="theta",ylab="l(theta)",sub="loglikehood function against theta",col.main="green",font.main=2)
l <- function(x, theta){
- 19*log(2*pi, base = exp(1)) + sum(1-(cos(x-theta))
}
l <- function(x, theta){
-19*log(2*pi)+sum(1-(cos(x-theta)))
}
x <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46, 3.53, 2.28, 1.96,
2.53, 3.88, 2.22, 3.47, 4.82, 2.46, 2.99, 2.54, 0.52)
n <- 19
l <- function(x, theta){
-19*log(2*pi)+sum(1-(cos(x-theta)))
}
theta <- seq(-pi, pi, 0.1)
L <- numeric(0)
for (i in 1: length(theta)){
L[i] <- l(X,theta[i])
}
sp=spline(theta,L,n=1000)
plot(sp,col="red",type="l",xlim=c(0,10),ylim=c(-70,-25),lwd=2,xlab="theta",ylab="l(theta)",sub="loglikehood function against theta",col.main="green",font.main=2)
plot(sp,col="red",type="l",xlim=c(-4,4),ylim=c(-70,-25),lwd=2,xlab="theta",ylab="l(theta)",sub="loglikehood function against theta",col.main="green",font.main=2)
log_sum(1,sample)
x <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46, 3.53, 2.28, 1.96,
2.53, 3.88, 2.22, 3.47, 4.82, 2.46, 2.99, 2.54, 0.52)
n <- 19
l <- function(x, theta){
-19*log(2*pi)+sum(log1-(cos(x-theta)))
}
x <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46, 3.53, 2.28, 1.96,
2.53, 3.88, 2.22, 3.47, 4.82, 2.46, 2.99, 2.54, 0.52)
n <- 19
l <- function(x, theta){
-19*log(2*pi)+sum(log1-(cos(x-theta)))
}
theta <- seq(-pi, pi, 0.1)
L <- numeric(0)
for (i in 1: length(theta)){
L[i] <- l(X,theta[i])
}
x <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46, 3.53, 2.28, 1.96,
2.53, 3.88, 2.22, 3.47, 4.82, 2.46, 2.99, 2.54, 0.52)
n <- 19
l <- function(x, theta){
-19*log(2*pi)+sum(log1-(cos(x-theta)))
}
theta <- seq(-pi, pi, 0.1)
L <- numeric(0)
for (i in 1: length(theta)){
L[i] <- l(x,theta[i])
}
theta <- seq(-pi, pi, 0.1)
L <- numeric(0)
for (i in 1: length(theta)){
L[i] <- l(x=x,theta[i])
}
sample <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46, 3.53, 2.28, 1.96,
2.53, 3.88, 2.22, 3.47, 4.82, 2.46, 2.99, 2.54, 0.52)
n <- 19
l <- function(x, theta){
-19*log(2*pi)+sum(log1-(cos(x-theta)))
}
for (i in 1: length(theta)){
L[i] <- l(sample,theta[i])
}
l <- function(x, y){
-19*log(2*pi)+sum(log(1-(cos(x-y)))
}
n <- 19
l <- function(x, y){
-19*log(2*pi)+sum(log(1-(cos(x-y))))
}
theta <- seq(-pi, pi, 0.1)
L <- numeric(0)
for (i in 1: length(theta)){
L[i] <- l(sample,theta[i])
}
sp=spline(theta,L,n=1000)
plot(sp,col="red",type="l",xlim=c(-4,4),ylim=c(-70,-25),lwd=2,xlab="theta",ylab="l(theta)",sub="loglikehood function against theta",col.main="green",font.main=2)
sample <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46, 3.53, 2.28, 1.96,
2.53, 3.88, 2.22, 3.47, 4.82, 2.46, 2.99, 2.54, 0.52)
l <- function(x, y){
-19*log(2*pi)+sum(log(1-(cos(x-y))))
}
theta <- seq(-pi, pi, 0.1)
L <- numeric(0)
for (i in 1: length(theta)){
L[i] <- l(sample,theta[i])
}
sp=spline(theta,L,n=1000)
plot(sp,col="red",type="l",xlim=c(-pi,pi),ylim=c(-80,-25),lwd=2,xlab="theta",ylab="l(theta)",sub="loglikehood function against theta",col.main="black",font.main=2)
sample <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46, 3.53, 2.28, 1.96,
2.53, 3.88, 2.22, 3.47, 4.82, 2.46, 2.99, 2.54, 0.52)
l <- function(x, y){
-19*log(2*pi)+sum(log(1-(cos(x-y))))
}
theta <- seq(-pi, pi, 0.1)
L <- numeric(0)
for (i in 1: length(theta)){
L[i] <- l(sample,theta[i])
}
sp=spline(theta,L,n=1000)
plot(sp,col="red",type="l",xlim=c(-pi,pi),ylim=c(-80,-25),lwd=2,xlab="theta",ylab="l(theta)",sub="loglikehood function against theta",col.main="green",font.main=2)
l1 <- function(x, theta){
sum((-sin(x-theta))/(1 -cos(x-theta)))
}
l2 <- function(x,theta){
sum(1/(cos(x-theta)-1))
}
Newton.Method <- function(y,f,f1){
y0 <- y
for(i in 1:100){
y1 <- y0 - f(X,y0,10)/f1(X,y0,10)
if(abs(y1-y0)<0.0001)
break
y0 <- y1
}
return(data.frame(init=y,root=y1,iter=i))
}
Newton.Method(0.0954,l1,l2)
l1 <- function(x, theta){
sum((-sin(x-theta))/(1 -cos(x-theta)))
}
l2 <- function(x,theta){
sum(1/(cos(x-theta)-1))
}
Newton.Method <- function(y,f,f1){
y0 <- y
for(i in 1:100){
y1 <- y0 - f(X,y0,10)/f1(X,y0,10)
if(abs(y1-y0)<0.0001)
break
y0 <- y1
}
return(data.frame(init=y,root=y1,iter=i))
}
Newton.Method <- function(y,f,f1){
y0 <- y
for(i in 1:100){
y1 <- y0 - f(X,y0)/f1(X,y0)
if(abs(y1-y0)<0.0001)
break
y0 <- y1
}
return(data.frame(init=y,root=y1,iter=i))
}
Newton.Method(0.0954,l1,l2)
l1 <- function(x, theta){
sum((sin(x-theta))/(1 -cos(x-theta)))
}
l2 <- function(x,theta){
sum(1/(1-cos(x-theta)))
}
Newton.Method <- function(y,f,f1){
y0 <- y
for(i in 1:100){
y1 <- y0 - f(X,y0)/f1(X,y0)
if(abs(y1-y0)<0.0001)
break
y0 <- y1
}
return(data.frame(init=y,root=y1,iter=i))
}
Newton.Method(0.0954,l1,l2)
l1 <- function(x, theta){
sum((-sin(x-theta))/(1 -cos(x-theta)))
}
l2 <- function(x,theta){
sum(-1/(1-cos(x-theta)))
}
Newton.Method <- function(y,f,f1){
y0 <- y
for(i in 1:100){
y1 <- y0 - f(X,y0)/f1(X,y0)
if(abs(y1-y0)<0.0001)
break
y0 <- y1
}
return(data.frame(init=y,root=y1,iter=i))
}
Newton.Method(0.0954,l1,l2)
l1 <- function(x, theta){
sum((sin(x-theta))/(1 -cos(x-theta)))
}
l2 <- function(x,theta){
sum(1/(1-cos(x-theta)))
}
Newton.Method <- function(y,f,f1){
y0 <- y
for(i in 1:100){
y1 <- y0 - f(X,y0)/f1(X,y0)
if(abs(y1-y0)<0.0001)
break
y0 <- y1
}
return(data.frame(init=y,root=y1,iter=i))
}
Newton.Method(0.0954,l1,l2)
sample <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46, 3.53, 2.28, 1.96,
2.53, 3.88, 2.22, 3.47, 4.82, 2.46, 2.99, 2.54, 0.52)
log_sum <- function(x, sample){
log_sum <- 0
for (i in 1:length(sample)) {
log_sum <- log_sum + log(1 - cos(sample[i] - x)) - log(2 * pi)
}
log_sum
}
library("ggplot2")
ggplot(data.frame(x = c(-pi, pi)), aes(x = x)) +
stat_function(fun = function(x) log_sum(x, sample)) +
labs(x = expression("Values of"~theta), y = expression("Log Likelihood Function"~l(theta))) +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle(expression("Log Likelihood Function vs."~theta))
sample <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46, 3.53, 2.28, 1.96,
2.53, 3.88, 2.22, 3.47, 4.82, 2.46, 2.99, 2.54, 0.52)
dev1_log_sum <- function(x){
dev1_log_sum <- 0
for (i in 1:length(sample)) {
dev1_log_sum <- dev1_log_sum - sin(sample[i] - x)/(1 - cos(sample[i] - x))
}
dev1_log_sum
}
dev2_log_sum <- function(x){
dev2_log_sum <- 0
for (i in 1:length(sample)) {
dev2_log_sum <- dev2_log_sum + 1/(cos(sample[i] - x) - 1)
}
dev2_log_sum
}
newton.raphson <- function(init, fun, fun.dev, maxiter = 100, tol = .Machine$double.eps^0.2){
x <- init
for (i in 1:maxiter) {
x1 <- x -fun(x)/fun.dev(x)
if(abs(x1 - x) < tol) break
x <- x1
}
if(i == maxiter)
message("Reached the maximum iteration!")
return(data.frame(root = x1, iter = i))
}
init <- c(asin(mean(sample) - pi), pi - asin(mean(sample) - pi))
res <- data.frame(init = init, root = rep(NA, length(init)))
for (i in 1:length(init)) {
res$root[i] <- newton.raphson(init[i], dev1_log_sum, dev2_log_sum)$root
}
res_trans <- t(as.matrix(res))
rownames(res_trans) <- c("Initial Values", "Roots")
knitr::kable(res_trans, booktabs = TRUE,
caption = "Initial Values and Roots")
init <- c(asin(mean(sample) - pi), pi - asin(mean(sample) - pi))
Newton.Method(init,l1,l2)
l(x,1)
init
Newton.Method(0.0953941,l1,l2)
Newton.Method(0.0031182,l1,l2)
Newton.Method(init,l1,l2)
res <- data.frame(init = init, root = rep(NA, length(init)))
for (i in 1:length(init)) {
res$root[i] <- newton.raphson(init[i], dev1_log_sum, dev2_log_sum)$root
}
res_trans <- t(as.matrix(res))
rownames(res_trans) <- c("Initial Values", "Roots")
knitr::kable(res_trans, booktabs = TRUE,
caption = "Initial Values and Roots")
l1 <- function(x, theta){
sum((-sin(x-theta))/(1 -cos(x-theta)))
}
l2 <- function(x,theta){
sum((1)/(cos(x-theta)-1))
}
Newton.Method <- function(y,f,f1){
y0 <- y
for(i in 1:100){
y1 <- y0 - f(sample,y0)/f1(sample,y0)
if(abs(y1-y0)<0.0001)
break
y0 <- y1
}
return(data.frame(init=y,root=y1,iter=i))
}
init <- c(asin(mean(sample) - pi), pi - asin(mean(sample) - pi))
Newton.Method(init,l1,l2)
Newton.Method(0.0031182,l1,l2)
l1 <- function(sample, theta){
sum((-sin(sample-theta))/(1 -cos(sample-theta)))
}
l2 <- function(sample,theta){
sum((1)/(cos(sample-theta)-1))
}
Newton.Method <- function(y,f,f1){
y0 <- y
for(i in 1:100){
y1 <- y0 - f(sample,y0)/f1(sample,y0)
if(abs(y1-y0)<0.0001)
break
y0 <- y1
}
return(data.frame(init=y,root=y1,iter=i))
}
init <- c(asin(mean(sample) - pi), pi - asin(mean(sample) - pi))
Newton.Method(init,l1,l2)
sample <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46, 3.53, 2.28, 1.96,
2.53, 3.88, 2.22, 3.47, 4.82, 2.46, 2.99, 2.54, 0.52)
l1 <- function(sample, theta){
sum((-sin(sample-theta))/(1 -cos(sample-theta)))
}
l2 <- function(sample,theta){
sum((1)/(cos(sample-theta)-1))
}
Newton.Method <- function(y,f,f1){
y0 <- y
for(i in 1:100){
y1 <- y0 - f(sample,y0)/f1(sample,y0)
if(abs(y1-y0)<0.0001)
break
y0 <- y1
}
return(data.frame(init=y,root=y0,iter=i))
}
init <- c(asin(mean(sample) - pi), pi - asin(mean(sample) - pi))
Newton.Method(init,l1,l2)
Newton.Method(0.09539,l1,l2)
Newton.Method(init,l1,l2)
Newton.Method(0.09539,l1,l2)
Newton.Method(0.0953941,l1,l2)
init
Newton.Method(asin(mean(sample) - pi),l1,l2)
Newton.Method(pi - asin(mean(sample) - pi),l1,l2)
Newton.Method(-2.7,l1,l2)
Newton.Method(2.7,l1,l2)
Newton.Method(-2.7,l1,l2)
Newton.Method(2.7,l1,l2)
s <- c(-2,7,2,7)
Newton.Method(s,l1,l2)
Newton.Method(-2.7,l1,l2)
Newton.Method(2.7,l1,l2)
s <- c(-2.7,2.7)
Newton.Method(s,l1,l2)
i <- seq(-pi,pi,length=200)
i
init <- seq(-pi,pi,length=200)
for(i in 1:length(init)){
root <- c(0)
root[i] <- Newton.Method(init[i],l1,l2)
}
init <- seq(-pi,pi,length=200)
root <- c(0)
for(i in 1:length(init)){
root[i] <- Newton.Method(init[i],l1,l2)
}
init
root[2]<-Newton.Method(init[2],l1,l2)
root
init <- seq(-pi,pi,length=200)
root <- numeric(0)
for(i in 1:){
init <- seq(-pi,pi,length=200)
root <- numeric(0)
for(i in 1:length(init)){
root[i] <- Newton.Method(init[i],l1,l2)
}
init <- seq(-pi,pi,length=200)
root <- numeric(length(init))
for(i in 1:length(init)){
root[i] <- Newton.Method(init[i],l1,l2)
}
root
root <- numeric(length(init))
root
Newton.Method(init[6],l1,l2)
init <- seq(-pi,pi,length=200)
root <- numeric(length(init))
for(i in 1:length(init)){
root[i] <- Newton.Method(init[i],l1,l2)[1,2]
}
init <- seq(-pi,pi,length=200)
root <- numeric(length(init))
for(i in 1:length(init)){
root[i] <- Newton.Method(init[i],l1,l2)[1,2]
}
root
plot(init,root)
?plot
plot(init,root,main = "Roots VS. Initial Values")
